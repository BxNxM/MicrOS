{
    "L298N_DCmotor": {
        "help": {
            "doc": null,
            "param(s)": null
        },
        "img": "<img src=\"https://github.com/BxNxM/micrOS/blob/master/media/lms/L298N_DCmotor.png?raw=true\" alt=\"L298N_DCmotor\" height=150 width=200>",
        "m1_control": {
            "doc": null,
            "param(s)": "direc=None speed=None"
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins associated to the module\n    :return dict: pin name (str) - pin value (int) pairs\n    ",
            "param(s)": null
        },
        "set_direction": {
            "doc": "\n    direc (direction) values:\n    0: forward\n    1: backward\n    ",
            "param(s)": "direc=0"
        },
        "set_speed": {
            "doc": null,
            "param(s)": "speed=100"
        },
        "stop": {
            "doc": null,
            "param(s)": null
        }
    },
    "L9110_DCmotor": {
        "help": {
            "doc": null,
            "param(s)": null
        },
        "img": "<img src=\"https://github.com/BxNxM/micrOS/blob/master/media/lms/L9110_DCmotor.png?raw=true\" alt=\"L9110_DCmotor\" height=150 width=200>",
        "motor_control": {
            "doc": null,
            "param(s)": "direc=None speed=None"
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins associated to the module\n    :return dict: pin name (str) - pin value (int) pairs\n    ",
            "param(s)": null
        }
    },
    "VL53L0X": {
        "help": {
            "doc": "No module named 'ustruct'",
            "param(s)": null
        },
        "img": "<img src=\"https://github.com/BxNxM/micrOS/blob/master/media/lms/VL53L0X.png?raw=true\" alt=\"VL53L0X\" height=150 width=200>",
        "measure": {
            "doc": "No module named 'ustruct'",
            "param(s)": null
        },
        "pinmap": {
            "doc": "No module named 'ustruct'",
            "param(s)": null
        }
    },
    "bme280": {
        "help": {
            "doc": null,
            "param(s)": null
        },
        "img": "<img src=\"https://github.com/BxNxM/micrOS/blob/master/media/lms/bme280.png?raw=true\" alt=\"bme280\" height=150 width=200>",
        "lmdep": {
            "doc": null,
            "param(s)": null
        },
        "measure": {
            "doc": null,
            "param(s)": null
        },
        "measure_w_co2": {
            "doc": null,
            "param(s)": null
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins associated to the module\n    :return dict: pin name (str) - pin value (int) pairs\n    ",
            "param(s)": null
        }
    },
    "buzzer": {
        "bipp": {
            "doc": null,
            "param(s)": "repeat=1 freq=None"
        },
        "help": {
            "doc": null,
            "param(s)": null
        },
        "img": "<img src=\"https://github.com/BxNxM/micrOS/blob/master/media/lms/buzzer.png?raw=true\" alt=\"buzzer\" height=150 width=200>",
        "load_n_init": {
            "doc": null,
            "param(s)": "cache=None"
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins associated to the module\n    :return dict: pin name (str) - pin value (int) pairs\n    ",
            "param(s)": null
        },
        "play": {
            "doc": null,
            "param(s)": "rtttlstr='d=4o=5b=250:e8p8f8g8p1c68p.d8p8e1fp.'"
        }
    },
    "catgame": {
        "game": {
            "doc": null,
            "param(s)": "repeat=10 delta=20"
        },
        "help": {
            "doc": null,
            "param(s)": null
        },
        "img": "<img src=\"https://github.com/BxNxM/micrOS/blob/master/media/lms/catgame.png?raw=true\" alt=\"catgame\" height=150 width=200>",
        "live_game": {
            "doc": null,
            "param(s)": "chance=10"
        },
        "lmdep": {
            "doc": null,
            "param(s)": null
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins associated to the module\n    :return dict: pin name (str) - pin value (int) pairs\n    ",
            "param(s)": null
        },
        "stop": {
            "doc": null,
            "param(s)": null
        }
    },
    "cct": {
        "brightness": {
            "doc": null,
            "param(s)": "percent=None smooth=True"
        },
        "help": {
            "doc": null,
            "param(s)": null
        },
        "img": "<img src=\"https://github.com/BxNxM/micrOS/blob/master/media/lms/cct.png?raw=true\" alt=\"cct\" height=150 width=200>",
        "load_n_init": {
            "doc": "\n    Initiate Cold white / Warm white LED module\n    - Load .pds file for that module\n    - restore state machine from .pds\n    :param cache: file state machine chache: True(default)/False\n    :return: Cache state\n    ",
            "param(s)": "cache=None"
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins associated to the module\n    :return dict: pin name (str) - pin value (int) pairs\n    ",
            "param(s)": null
        },
        "random": {
            "doc": "\n    Demo function: random color change\n    ",
            "param(s)": "smooth=True max_val=1000"
        },
        "run_transition": {
            "doc": "\n    Transition execution - white channels change for long dimming periods\n    - runs the generated 2 white dimming generators\n    :return: Execution verdict\n    ",
            "param(s)": null
        },
        "set_transition": {
            "doc": "\n    Set transition white channel change for long dimming periods < 30sec\n    - creates the 2 white dimming generators\n    :param cw: cold white value   0-1000\n    :param ww: warm white value 0-1000\n    :param sec: transition length in sec\n    :return: info msg string\n    ",
            "param(s)": "cw ww sec"
        },
        "status": {
            "doc": null,
            "param(s)": "lmf=None"
        },
        "subscribe_presence": {
            "doc": "\n    Initialize LM presence module with ON/OFF callback functions\n    ",
            "param(s)": "timer=30"
        },
        "toggle": {
            "doc": "\n    Toggle led state based on the stored state\n    :param state: True(1)/False(0)\n    :param smooth: runs white channels change with smooth effect\n    :return: verdict\n    ",
            "param(s)": "state=None smooth=True"
        },
        "white": {
            "doc": "\n    Set RGB values with PWM signal\n    :param c: cold white value   0-1000\n    :param w: warm white value 0-1000\n    :param smooth: runs white channels change with smooth effect\n    :param force: clean fade generators and set color\n    :return: verdict string\n    ",
            "param(s)": "c=None w=None smooth=True"
        }
    },
    "co2": {
        "help": {
            "doc": null,
            "param(s)": null
        },
        "img": "<img src=\"https://github.com/BxNxM/micrOS/blob/master/media/lms/co2.png?raw=true\" alt=\"co2\" height=150 width=200>",
        "measure_mq135": {
            "doc": "\n    CO2 Gas Concentration - Parts-per-million - PPM\n    -> 1ppm = 0.0001% gas.\n    Concentration evaluation:\n        250-400ppm      Normal background concentration in outdoor ambient air\n        400-1,000ppm    Concentrations typical of occupied indoor spaces with good air exchange\n        1,000-2,000ppm  Complaints of drowsiness and poor air.\n        2,000-5,000 ppm Headaches, sleepiness and stagnant, stale, stuffy air. Poor concentration, loss of attention, increased heart rate and slight nausea may also be present.\n        5,000ppm        Workplace exposure limit (as 8-hour TWA) in most jurisdictions.\n        >40,000 ppm     Exposure may lead to serious oxygen deprivation resulting in permanent brain damage, coma, even death.\n    ",
            "param(s)": "temperature=None humidity=None"
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins associated to the module\n    :return dict: pin name (str) - pin value (int) pairs\n    ",
            "param(s)": null
        },
        "raw_measure_mq135": {
            "doc": null,
            "param(s)": null
        }
    },
    "dht11": {
        "help": {
            "doc": null,
            "param(s)": null
        },
        "img": "<img src=\"https://github.com/BxNxM/micrOS/blob/master/media/lms/dht11.png?raw=true\" alt=\"dht11\" height=150 width=200>",
        "lmdep": {
            "doc": null,
            "param(s)": null
        },
        "measure": {
            "doc": null,
            "param(s)": null
        },
        "measure_w_co2": {
            "doc": null,
            "param(s)": null
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins associated to the module\n    :return dict: pin name (str) - pin value (int) pairs\n    ",
            "param(s)": null
        }
    },
    "dht22": {
        "help": {
            "doc": null,
            "param(s)": null
        },
        "img": "<img src=\"https://github.com/BxNxM/micrOS/blob/master/media/lms/dht22.png?raw=true\" alt=\"dht22\" height=150 width=200>",
        "lmdep": {
            "doc": null,
            "param(s)": null
        },
        "measure": {
            "doc": null,
            "param(s)": null
        },
        "measure_w_co2": {
            "doc": null,
            "param(s)": null
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins associated to the module\n    :return dict: pin name (str) - pin value (int) pairs\n    ",
            "param(s)": null
        }
    },
    "dimmer": {
        "help": {
            "doc": null,
            "param(s)": null
        },
        "img": "<img src=\"https://github.com/BxNxM/micrOS/blob/master/media/lms/dimmer.png?raw=true\" alt=\"dimmer\" height=150 width=200>",
        "load_n_init": {
            "doc": null,
            "param(s)": "cache=None"
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins associated to the module\n    :return dict: pin name (str) - pin value (int) pairs\n    ",
            "param(s)": null
        },
        "set_value": {
            "doc": null,
            "param(s)": "value=None"
        },
        "status": {
            "doc": null,
            "param(s)": "lmf=None"
        },
        "subscribe_presence": {
            "doc": "\n    Initialize LM presence module with ON/OFF callback functions\n    ",
            "param(s)": "timer=30"
        },
        "toggle": {
            "doc": "\n    Toggle led state based on the stored one\n    ",
            "param(s)": "state=None"
        }
    },
    "distance": {
        "deinit": {
            "doc": "cannot import name 'time_pulse_us' from 'machine' (/Users/bnm/Documents/NodeMcu/MicrOS/toolkit/simulator_lib/machine.py)",
            "param(s)": null
        },
        "distance_cm": {
            "doc": "cannot import name 'time_pulse_us' from 'machine' (/Users/bnm/Documents/NodeMcu/MicrOS/toolkit/simulator_lib/machine.py)",
            "param(s)": null
        },
        "distance_mm": {
            "doc": "cannot import name 'time_pulse_us' from 'machine' (/Users/bnm/Documents/NodeMcu/MicrOS/toolkit/simulator_lib/machine.py)",
            "param(s)": null
        },
        "help": {
            "doc": "cannot import name 'time_pulse_us' from 'machine' (/Users/bnm/Documents/NodeMcu/MicrOS/toolkit/simulator_lib/machine.py)",
            "param(s)": null
        },
        "img": "<img src=\"https://github.com/BxNxM/micrOS/blob/master/media/lms/distance.png?raw=true\" alt=\"distance\" height=150 width=200>",
        "pinmap": {
            "doc": "cannot import name 'time_pulse_us' from 'machine' (/Users/bnm/Documents/NodeMcu/MicrOS/toolkit/simulator_lib/machine.py)",
            "param(s)": null
        }
    },
    "ds18": {
        "help": {
            "doc": "No module named 'onewire'",
            "param(s)": null
        },
        "img": "<img src=\"https://github.com/BxNxM/micrOS/blob/master/media/lms/ds18.png?raw=true\" alt=\"ds18\" height=150 width=200>",
        "measure": {
            "doc": "No module named 'onewire'",
            "param(s)": null
        },
        "pinmap": {
            "doc": "No module named 'onewire'",
            "param(s)": null
        }
    },
    "esp32": {
        "battery": {
            "doc": "No module named 'esp32'",
            "param(s)": null
        },
        "hall": {
            "doc": "No module named 'esp32'",
            "param(s)": null
        },
        "help": {
            "doc": "No module named 'esp32'",
            "param(s)": null
        },
        "img": "<img src=\"https://github.com/BxNxM/micrOS/blob/master/media/lms/esp32.png?raw=true\" alt=\"esp32\" height=150 width=200>",
        "temp": {
            "doc": "No module named 'esp32'",
            "param(s)": null
        },
        "touch": {
            "doc": "No module named 'esp32'",
            "param(s)": "triglvl=300"
        }
    },
    "genIO": {
        "get_adc": {
            "doc": "\n    Get Analog Digital conersion input\n    :param pin: pin number or logical pin name\n    :return: verdict\n    ",
            "param(s)": "pin"
        },
        "get_in": {
            "doc": "\n    Get digital input (high(1)/ low (0))\n    :param pin: pin number or logical pin\n    :return: verdict\n    ",
            "param(s)": "pin"
        },
        "help": {
            "doc": null,
            "param(s)": null
        },
        "img": "<img src=\"https://github.com/BxNxM/micrOS/blob/master/media/lms/genIO.png?raw=true\" alt=\"genIO\" height=150 width=200>",
        "set_out": {
            "doc": "\n    Set simple digital (high/low) output\n    :param pin: pun number or logical name\n    :param state: state: 1/0 = True/False\n    :return: verdict\n    ",
            "param(s)": "pin state"
        },
        "set_pwm": {
            "doc": "\n    Set PWM signal output\n    :param pin: pin number or logical name\n    :param freq: pwm frequency (board dependent)\n    :param duty: pwm duty\n    :return: verdict\n    ",
            "param(s)": "pin freq=1024 duty=500"
        }
    },
    "i2c": {
        "help": {
            "doc": null,
            "param(s)": null
        },
        "img": "<img src=\"https://github.com/BxNxM/micrOS/blob/master/media/lms/i2c.png?raw=true\" alt=\"i2c\" height=150 width=200>",
        "pinmap": {
            "doc": "\"\n    [i] micrOS LM naming convention\n    Shows logical pins associated to the module\n    :return dict: pin name (str) - pin value (int) pairs\n    ",
            "param(s)": null
        },
        "scan": {
            "doc": null,
            "param(s)": null
        }
    },
    "intercon": {
        "dump": {
            "doc": null,
            "param(s)": null
        },
        "help": {
            "doc": null,
            "param(s)": null
        },
        "img": "<img src=\"https://github.com/BxNxM/micrOS/blob/master/media/lms/intercon.png?raw=true\" alt=\"intercon\" height=150 width=200>",
        "sendcmd": {
            "doc": null,
            "param(s)": "*args **kwargs"
        }
    },
    "light_sensor": {
        "help": {
            "doc": null,
            "param(s)": null
        },
        "illuminance": {
            "doc": "\n    Measure light illuminance in flux\n    ",
            "param(s)": null
        },
        "img": "<img src=\"https://github.com/BxNxM/micrOS/blob/master/media/lms/light_sensor.png?raw=true\" alt=\"light_sensor\" height=150 width=200>",
        "intensity": {
            "doc": "\n    Measure light intensity in %\n    max value: 65535\n    ",
            "param(s)": null
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins associated to the module\n    :return dict: pin name (str) - pin value (int) pairs\n    ",
            "param(s)": null
        }
    },
    "neoeffects": {
        "color": {
            "doc": null,
            "param(s)": "r=None g=None b=None"
        },
        "cycle": {
            "doc": null,
            "param(s)": "r=None g=None b=None shift=True ledcnt=24"
        },
        "draw": {
            "doc": "module 'LM_neoeffects' has no attribute 'draw'",
            "param(s)": "cls iterable shift=False"
        },
        "gen": {
            "doc": "module 'LM_neoeffects' has no attribute 'gen'",
            "param(s)": null
        },
        "help": {
            "doc": null,
            "param(s)": null
        },
        "img": "<img src=\"https://github.com/BxNxM/micrOS/blob/master/media/lms/neoeffects.png?raw=true\" alt=\"neoeffects\" height=150 width=200>",
        "lmdep": {
            "doc": null,
            "param(s)": null
        },
        "meteor": {
            "doc": null,
            "param(s)": "r=None g=None b=None shift=True ledcnt=24"
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins associated to the module\n    :return dict: pin name (str) - pin value (int) pairs\n    ",
            "param(s)": null
        },
        "rainbow": {
            "doc": null,
            "param(s)": "step=1 br=50 ledcnt=24"
        },
        "random": {
            "doc": null,
            "param(s)": "max_val=254"
        },
        "shader": {
            "doc": null,
            "param(s)": "size=6 offset=0 shift=False ledcnt=24"
        }
    },
    "neopixel": {
        "brightness": {
            "doc": null,
            "param(s)": "percent=None smooth=True"
        },
        "help": {
            "doc": null,
            "param(s)": null
        },
        "img": "<img src=\"https://github.com/BxNxM/micrOS/blob/master/media/lms/neopixel.png?raw=true\" alt=\"neopixel\" height=150 width=200>",
        "load_n_init": {
            "doc": "\n    Initiate NeoPixel RGB module\n    - Load .pds file for that module\n    - restore state machine from .pds\n    :param cache: file state machine chache: True(default)/False\n    :param ledcnt: led segment count (for addressing) - should be set in boothook\n    :return: Cache state\n    ",
            "param(s)": "cache=None ledcnt=24"
        },
        "neopixel": {
            "doc": "\n    Set NEOPIXEL RGB values\n    :param r: red value   0-255\n    :param g: green value 0-255\n    :param b: blue value  0-255\n    :param smooth: runs colors change with smooth effect\n    :param force: clean fade generators and set color\n    :return: verdict string\n    ",
            "param(s)": "r=None g=None b=None smooth=True"
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins associated to the module\n    :return dict: pin name (str) - pin value (int) pairs\n    ",
            "param(s)": null
        },
        "random": {
            "doc": "\n    Demo function: random color change\n    ",
            "param(s)": "smooth=True max_val=254"
        },
        "run_transition": {
            "doc": "\n    Transition execution/\"stepping\"\n    - run color change for long dimming periods\n        - runs the generated color dimming generators\n    :return: Execution verdict\n    ",
            "param(s)": null
        },
        "segment": {
            "doc": null,
            "param(s)": "r=None g=None b=None s=0 cache=False write=True"
        },
        "set_transition": {
            "doc": "\n    Set transition color change for long dimming periods < 30sec\n    - creates the color dimming generators\n    :param r: red value   0-255\n    :param g: green value 0-255\n    :param b: blue value  0-255\n    :param sec: transition length in sec\n    :return: info msg string\n    ",
            "param(s)": "r g b sec"
        },
        "status": {
            "doc": null,
            "param(s)": "lmf=None"
        },
        "subscribe_presence": {
            "doc": "\n    Initialize LM presence module with ON/OFF callback functions\n    ",
            "param(s)": "timer=30"
        },
        "toggle": {
            "doc": "\n    Toggle led state based on the stored state\n    :param state: True(1)/False(0)\n    :param smooth: runs colors change with smooth effect\n    :return: verdict\n    ",
            "param(s)": "state=None smooth=True"
        }
    },
    "oled": {
        "clean": {
            "doc": "No module named 'framebuf'",
            "param(s)": "state=0"
        },
        "help": {
            "doc": "No module named 'framebuf'",
            "param(s)": null
        },
        "img": "<img src=\"https://github.com/BxNxM/micrOS/blob/master/media/lms/oled.png?raw=true\" alt=\"oled\" height=150 width=200>",
        "invert": {
            "doc": "No module named 'framebuf'",
            "param(s)": null
        },
        "line": {
            "doc": "No module named 'framebuf'",
            "param(s)": "sx sy ex ey state=1"
        },
        "pinmap": {
            "doc": "No module named 'framebuf'",
            "param(s)": null
        },
        "poweroff": {
            "doc": "No module named 'framebuf'",
            "param(s)": null
        },
        "poweron": {
            "doc": "No module named 'framebuf'",
            "param(s)": null
        },
        "rect": {
            "doc": "No module named 'framebuf'",
            "param(s)": "x y w h state=1 fill=False"
        },
        "show": {
            "doc": "No module named 'framebuf'",
            "param(s)": null
        },
        "text": {
            "doc": "No module named 'framebuf'",
            "param(s)": "string=\"text\" x=0 y=0"
        }
    },
    "oled_ui": {
        "button": {
            "doc": "cannot import name 'mem_free' from 'gc' (unknown location)",
            "param(s)": null
        },
        "control": {
            "doc": "cannot import name 'mem_free' from 'gc' (unknown location)",
            "param(s)": "cmd='next'"
        },
        "help": {
            "doc": "cannot import name 'mem_free' from 'gc' (unknown location)",
            "param(s)": null
        },
        "img": "<img src=\"https://github.com/BxNxM/micrOS/blob/master/media/lms/oled_ui.png?raw=true\" alt=\"oled_ui\" height=150 width=200>",
        "intercon_genpage": {
            "doc": "cannot import name 'mem_free' from 'gc' (unknown location)",
            "param(s)": "cmd=None"
        },
        "lmdep": {
            "doc": "cannot import name 'mem_free' from 'gc' (unknown location)",
            "param(s)": null
        },
        "msgbox": {
            "doc": "cannot import name 'mem_free' from 'gc' (unknown location)",
            "param(s)": "msg='micrOS msg'"
        },
        "pageui": {
            "doc": "cannot import name 'mem_free' from 'gc' (unknown location)",
            "param(s)": "pwr_sec=None"
        },
        "pinmap": {
            "doc": "cannot import name 'mem_free' from 'gc' (unknown location)",
            "param(s)": null
        }
    },
    "pet_feeder": {
        "help": {
            "doc": null,
            "param(s)": null
        },
        "img": "<img src=\"https://github.com/BxNxM/micrOS/blob/master/media/lms/pet_feeder.png?raw=true\" alt=\"pet_feeder\" height=150 width=200>",
        "lmdep": {
            "doc": null,
            "param(s)": null
        },
        "portion": {
            "doc": null,
            "param(s)": "repeat=1 posmin=65 posmax=97"
        },
        "portion_new": {
            "doc": null,
            "param(s)": "count=1 forward=135 back=10"
        }
    },
    "ph_sensor": {
        "help": {
            "doc": null,
            "param(s)": null
        },
        "img": "<img src=\"https://github.com/BxNxM/micrOS/blob/master/media/lms/ph_sensor.png?raw=true\" alt=\"ph_sensor\" height=150 width=200>",
        "measure": {
            "doc": null,
            "param(s)": null
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins associated to the module\n    :return dict: pin name (str) - pin value (int) pairs\n    ",
            "param(s)": null
        }
    },
    "presence": {
        "get_samples": {
            "doc": "\n    [DEBUG] Return measured data set\n    ",
            "param(s)": null
        },
        "help": {
            "doc": null,
            "param(s)": null
        },
        "img": "<img src=\"https://github.com/BxNxM/micrOS/blob/master/media/lms/presence.png?raw=true\" alt=\"presence\" height=150 width=200>",
        "motion_trig": {
            "doc": "\n    Set motion trigger by IRQx - PIR sensor\n    - Reset OFF_EV_TIMER to TIMER_VALUE\n    - Start async mic sample task\n    ",
            "param(s)": "sample_ms=30 buff_size=15"
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins associated to the module\n    :return dict: pin name (str) - pin value (int) pairs\n    ",
            "param(s)": null
        },
        "subscribe_intercon": {
            "doc": "\n    Subscribe function for remote function execution\n    - intercon ON/OFF string callbacks\n        ON: host cmd\n        OFF: host cmd\n    ",
            "param(s)": "on off"
        },
        "threshold": {
            "doc": "Set threshold value",
            "param(s)": "th=Data.TRIG_THRESHOLD"
        }
    },
    "rgb": {
        "brightness": {
            "doc": null,
            "param(s)": "percent=None smooth=True"
        },
        "help": {
            "doc": null,
            "param(s)": null
        },
        "img": "<img src=\"https://github.com/BxNxM/micrOS/blob/master/media/lms/rgb.png?raw=true\" alt=\"rgb\" height=150 width=200>",
        "load_n_init": {
            "doc": "\n    Initiate RGB module\n    - Load .pds file for that module\n    - restore state machine from .pds\n    :param cache: file state machine chache: True(default)/False\n    :return: Cache state\n    ",
            "param(s)": "cache=None"
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins associated to the module\n    :return dict: pin name (str) - pin value (int) pairs\n    ",
            "param(s)": null
        },
        "random": {
            "doc": "\n    Demo function: random color change\n    ",
            "param(s)": "smooth=True max_val=1000"
        },
        "rgb": {
            "doc": "\n    Set RGB values with PWM signal\n    :param r: red value   0-1000\n    :param g: green value 0-1000\n    :param b: blue value  0-1000\n    :param smooth: runs colors change with smooth effect\n    :param force: clean fade generators and set color\n    :return: verdict string\n    ",
            "param(s)": "r=None g=None b=None smooth=True"
        },
        "run_transition": {
            "doc": "\n    Transition execution - color change for long dimming periods\n    - runs the generated color dimming generators\n    :return: Execution verdict\n    ",
            "param(s)": null
        },
        "set_transition": {
            "doc": "\n    Set transition color change for long dimming periods < 30sec\n    - creates the color dimming generators\n    :param r: red value   0-1000\n    :param g: green value 0-1000\n    :param b: blue value  0-1000\n    :param sec: transition length in sec\n    :return: info msg string\n    ",
            "param(s)": "r g b sec"
        },
        "status": {
            "doc": null,
            "param(s)": "lmf=None"
        },
        "subscribe_presence": {
            "doc": "\n    Initialize LM presence module with ON/OFF callback functions\n    ",
            "param(s)": "timer=30"
        },
        "toggle": {
            "doc": "\n    Toggle led state based on the stored state\n    :param state: True(1)/False(0)\n    :param smooth: runs colors change with smooth effect\n    :return: verdict\n    ",
            "param(s)": "state=None smooth=True"
        }
    },
    "roboarm": {
        "boot_move": {
            "doc": "\n    Full range demo move\n    ",
            "param(s)": "speed_ms=None"
        },
        "control": {
            "doc": null,
            "param(s)": "x_new y_new speed_ms=None smooth=True"
        },
        "help": {
            "doc": null,
            "param(s)": null
        },
        "img": "<img src=\"https://github.com/BxNxM/micrOS/blob/master/media/lms/roboarm.png?raw=true\" alt=\"roboarm\" height=150 width=200>",
        "jiggle": {
            "doc": "\n    Joggle roboarm in small range\n    ",
            "param(s)": null
        },
        "lmdep": {
            "doc": null,
            "param(s)": null
        },
        "load_n_init": {
            "doc": null,
            "param(s)": null
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins associated to the module\n    :return dict: pin name (str) - pin value (int) pairs\n    ",
            "param(s)": null
        },
        "play": {
            "doc": "\n    Runs move instructions from input or RoboArm.MOVE_RECORD\n    :param args: X Y X2 Y2 ...\n    :param s: SPEED_MS (delay)\n    :param delay: delay in ms between steps\n    :param deinit: deinit servo after execution\n    :return: verdict\n    ",
            "param(s)": "*args s=None delay=None deinit=True"
        },
        "random": {
            "doc": "\n    Move to random position\n    x_range: +/- x from center\n    y_range: +/- y from center\n    ",
            "param(s)": "x_range=20 y_range=20 speed_ms=5"
        },
        "record": {
            "doc": "\n    Record function for move automation :D\n    - Store actual X, Y\n    :return: verdict\n    ",
            "param(s)": "clean=False"
        },
        "standby": {
            "doc": "\n    Standby roboarm - OFF switch\n    ",
            "param(s)": null
        },
        "status": {
            "doc": null,
            "param(s)": "lmf=None"
        }
    },
    "robustness": {
        "help": {
            "doc": null,
            "param(s)": null
        },
        "img": "<img src=\"https://github.com/BxNxM/micrOS/blob/master/media/lms/robustness.png?raw=true\" alt=\"robustness\" height=150 width=200>",
        "memory_leak": {
            "doc": null,
            "param(s)": "cnt=160"
        },
        "raise_error": {
            "doc": null,
            "param(s)": null
        },
        "recursion_limit": {
            "doc": null,
            "param(s)": "cnt=14"
        }
    },
    "servo": {
        "deinit": {
            "doc": null,
            "param(s)": null
        },
        "help": {
            "doc": null,
            "param(s)": null
        },
        "img": "<img src=\"https://github.com/BxNxM/micrOS/blob/master/media/lms/servo.png?raw=true\" alt=\"servo\" height=150 width=200>",
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins associated to the module\n    :return dict: pin name (str) - pin value (int) pairs\n    ",
            "param(s)": null
        },
        "s2duty": {
            "doc": null,
            "param(s)": "duty=75"
        },
        "sdemo": {
            "doc": null,
            "param(s)": null
        },
        "sduty": {
            "doc": null,
            "param(s)": "duty=75"
        },
        "status": {
            "doc": null,
            "param(s)": "lmf=None"
        }
    },
    "stepper": {
        "angle": {
            "doc": "\n    :param dg: +/- 0-360 degree\n    :param speed: wait ms\n    :return: Info\n    ",
            "param(s)": "dg speed=None"
        },
        "help": {
            "doc": null,
            "param(s)": null
        },
        "img": "<img src=\"https://github.com/BxNxM/micrOS/blob/master/media/lms/stepper.png?raw=true\" alt=\"stepper\" height=150 width=200>",
        "load_n_init": {
            "doc": null,
            "param(s)": "mode=\"HALF\""
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins associated to the module\n    :return dict: pin name (str) - pin value (int) pairs\n    ",
            "param(s)": null
        },
        "standby": {
            "doc": null,
            "param(s)": null
        },
        "step": {
            "doc": null,
            "param(s)": "st speed=None"
        }
    },
    "switch": {
        "help": {
            "doc": null,
            "param(s)": null
        },
        "img": "<img src=\"https://github.com/BxNxM/micrOS/blob/master/media/lms/switch.png?raw=true\" alt=\"switch\" height=150 width=200>",
        "load_n_init": {
            "doc": null,
            "param(s)": "cache=None ch_init=None"
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins associated to the module\n    :return dict: pin name (str) - pin value (int) pairs\n    ",
            "param(s)": null
        },
        "set_state": {
            "doc": null,
            "param(s)": "state=None"
        },
        "set_state2": {
            "doc": null,
            "param(s)": "state=None"
        },
        "set_state3": {
            "doc": null,
            "param(s)": "state=None"
        },
        "set_state4": {
            "doc": null,
            "param(s)": "state=None"
        },
        "status": {
            "doc": "\n    :param lmf: Load Module Function name e.x.: toggle / set_state2\n    :return: return all / selected status\n    ",
            "param(s)": "lmf=None"
        },
        "toggle": {
            "doc": "\n    Toggle led state based on the stored one\n    ",
            "param(s)": null
        },
        "toggle2": {
            "doc": "\n    Toggle led state based on the stored one\n    ",
            "param(s)": null
        },
        "toggle3": {
            "doc": "\n    Toggle led state based on the stored one\n    ",
            "param(s)": null
        },
        "toggle4": {
            "doc": "\n    Toggle led state based on the stored one\n    ",
            "param(s)": null
        }
    },
    "system": {
        "alarms": {
            "doc": null,
            "param(s)": "clean=False test=False"
        },
        "cachedump": {
            "doc": null,
            "param(s)": "cdel=None"
        },
        "clock": {
            "doc": "\n    Get formatted localtime value\n    Format:\n        YYYY.MM.DD  hh:mm:ss\n        WD: 0-6 YD: 0-364\n    ",
            "param(s)": null
        },
        "gclean": {
            "doc": null,
            "param(s)": null
        },
        "ha_sta": {
            "doc": "\n    Check and repair STA network mode\n    ",
            "param(s)": null
        },
        "heartbeat": {
            "doc": "\n    Test function for built-in led blinking and test reply message\n    ",
            "param(s)": null
        },
        "help": {
            "doc": null,
            "param(s)": null
        },
        "ifconfig": {
            "doc": null,
            "param(s)": null
        },
        "img": "<img src=\"https://github.com/BxNxM/micrOS/blob/master/media/lms/system.png?raw=true\" alt=\"system\" height=150 width=200>",
        "info": {
            "doc": null,
            "param(s)": "msgobj"
        },
        "lmpacman": {
            "doc": null,
            "param(s)": "lm_del=None"
        },
        "module": {
            "doc": "\n    List / unload Load Modules\n    Parameters:\n         (str) unload: module name to unload\n         (None) unload: list active modules\n    Return:\n        (str) verdict\n    ",
            "param(s)": "unload=None"
        },
        "ntp": {
            "doc": "\n    Trigger NTP time sync\n    ",
            "param(s)": null
        },
        "pinmap": {
            "doc": "\n    Get Logical pin by key runtime\n    ",
            "param(s)": "key='builtin'"
        },
        "rssi": {
            "doc": null,
            "param(s)": null
        },
        "setclock": {
            "doc": "\n    Set Localtime + RTC Clock manually\n    Parameters:\n        year\n        month\n        mday\n        hour\n        min\n        sec\n    Return:\n        localtime\n    ",
            "param(s)": "year month mday hour min sec"
        },
        "sun": {
            "doc": "\n    Get sunset/sunrise time stumps\n    Parameters:\n        (bool) refresh: trigger sync with sun rest-api\n    Return:\n        (dict) sun time\n    ",
            "param(s)": "refresh=False"
        }
    },
    "tinyrgb": {
        "getstate": {
            "doc": "No module named 'tinypico'",
            "param(s)": null
        },
        "help": {
            "doc": "No module named 'tinypico'",
            "param(s)": null
        },
        "img": "<img src=\"https://github.com/BxNxM/micrOS/blob/master/media/lms/tinyrgb.png?raw=true\" alt=\"tinyrgb\" height=150 width=200>",
        "setrgb": {
            "doc": "No module named 'tinypico'",
            "param(s)": "r=None g=None b=None br=None"
        },
        "toggle": {
            "doc": "No module named 'tinypico'",
            "param(s)": "state=None"
        },
        "wheel": {
            "doc": "No module named 'tinypico'",
            "param(s)": "br=None"
        }
    }
}