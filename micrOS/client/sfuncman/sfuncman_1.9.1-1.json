{
    "L298N_DCmotor": {
        "help": {
            "doc": "\n    [i] micrOS LM naming convention\n    Load Module built-in help message\n    :return tuple: list of functions implemented by this application\n    ",
            "param(s)": ""
        },
        "img": "https://github.com/BxNxM/micrOS/blob/master/media/lms/L298N_DCmotor.png?raw=true",
        "m1_control": {
            "doc": null,
            "param(s)": "direc=None speed=None"
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins - pin number(s) used by this Load module\n    - info which pins to use for this application\n    :return dict: pin name (str) - pin value (int) pairs\n    \npin map: l298speed, l298dir_1, l298dir_2",
            "param(s)": ""
        },
        "set_direction": {
            "doc": "\n    direc (direction) values:\n    0: forward\n    1: backward\n    ",
            "param(s)": "direc=0"
        },
        "set_speed": {
            "doc": null,
            "param(s)": "speed=100"
        },
        "stop": {
            "doc": null,
            "param(s)": ""
        }
    },
    "L9110_DCmotor": {
        "help": {
            "doc": "\n    [i] micrOS LM naming convention\n    Load Module built-in help message\n    :return tuple: list of functions implemented by this application\n    ",
            "param(s)": ""
        },
        "img": "https://github.com/BxNxM/micrOS/blob/master/media/lms/L9110_DCmotor.png?raw=true",
        "motor_control": {
            "doc": null,
            "param(s)": "direc=None speed=None"
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins - pin number(s) used by this Load module\n    - info which pins to use for this application\n    :return dict: pin name (str) - pin value (int) pairs\n    \npin map: l9110dir_1, l9110dir_2",
            "param(s)": ""
        }
    },
    "VL53L0X": {
        "help": {
            "doc": "No module named 'ustruct'",
            "param(s)": ""
        },
        "img": "https://github.com/BxNxM/micrOS/blob/master/media/lms/VL53L0X.png?raw=true",
        "measure": {
            "doc": "No module named 'ustruct'",
            "param(s)": ""
        },
        "pinmap": {
            "doc": "No module named 'ustruct'",
            "param(s)": ""
        }
    },
    "bme280": {
        "help": {
            "doc": "\n    [i] micrOS LM naming convention\n    Load Module built-in help message\n    :return tuple: list of functions implemented by this application\n    ",
            "param(s)": ""
        },
        "img": "https://github.com/BxNxM/micrOS/blob/master/media/lms/bme280.png?raw=true",
        "lmdep": {
            "doc": "\n    Show Load Module dependency\n    - List of load modules used by this application\n    :return: tuple\n    ",
            "param(s)": ""
        },
        "measure": {
            "doc": "\n    Measure with bme280\n    :return dict: temp, hum, pressure\n    ",
            "param(s)": ""
        },
        "measure_w_co2": {
            "doc": "\n    Measure with bme280 and mq135 (CO2)\n    :return dict: temp, hum, pressure, co2\n    ",
            "param(s)": ""
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins - pin number(s) used by this Load module\n    - info which pins to use for this application\n    :return dict: pin name (str) - pin value (int) pairs\n    \npin map: i2c_scl, i2c_sda",
            "param(s)": ""
        }
    },
    "buzzer": {
        "bipp": {
            "doc": "\n    Buzzer bipp sound generator\n    :param repeat int: bipp count\n    :param freq int: 0-1000 default: 600\n    :return str: Verdict string\n    ",
            "param(s)": "repeat=1 freq=None"
        },
        "help": {
            "doc": "\n    [i] micrOS LM naming convention\n    Load Module built-in help message\n    :return tuple: list of functions implemented by this application\n    ",
            "param(s)": ""
        },
        "img": "https://github.com/BxNxM/micrOS/blob/master/media/lms/buzzer.png?raw=true",
        "load_n_init": {
            "doc": "\n    Initiate buzzer module\n    :param cache bool: file state machine cache: True/False/None(default: automatic True)\n    - Load .pds (state machine cache) for this load module\n    - Apply loaded states to gpio pins (boot function)\n    :return str: Cache state\n    ",
            "param(s)": "cache=None"
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins - pin number(s) used by this Load module\n    - info which pins to use for this application\n    :return dict: pin name (str) - pin value (int) pairs\n    \npin map: buzzer",
            "param(s)": ""
        },
        "play": {
            "doc": "\n    RTTTL Piezzo Player\n    :param rtttlstr str: rttl string, default: 'd=4,o=5,b=250:e,8p,8f,8g,8p,1c6,8p.,d,8p,8e,1f,p.'\n    :return str: verdict\n    ",
            "param(s)": "rtttlstr='d=4o=5b=250:e8p8f8g8p1c68p.d8p8e1fp.'"
        }
    },
    "catgame": {
        "game": {
            "doc": "\n    Servo cat toy \"mover\" - left-right\n    :param repeat int: repeat servo pos change\n    :param delta int: center(75) +/-delta(35)\n    :return str: verdict\n    ",
            "param(s)": "repeat=10 delta=20"
        },
        "help": {
            "doc": "\n    [i] micrOS LM naming convention\n    Load Module built-in help message\n    :return tuple: list of functions implemented by this application\n    ",
            "param(s)": ""
        },
        "img": "https://github.com/BxNxM/micrOS/blob/master/media/lms/catgame.png?raw=true",
        "live_game": {
            "doc": "\n    Generate game\n    :param chance int: percent value 0-100\n    :return str: verdict (action / no action)\n    ",
            "param(s)": "chance=10"
        },
        "lmdep": {
            "doc": "\n    Show Load Module dependency\n    - List of load modules used by this application\n    :return: tuple\n    ",
            "param(s)": ""
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins - pin number(s) used by this Load module\n    - info which pins to use for this application\n    :return dict: pin name (str) - pin value (int) pairs\n    \npin map: servo_1, servo_2",
            "param(s)": ""
        },
        "stop": {
            "doc": "\n    Stop game - home position (75) + deinit\n    :return str: servo verdict\n    ",
            "param(s)": ""
        }
    },
    "cct": {
        "brightness": {
            "doc": "\n    Set CCT brightness\n    :param percent int: brightness percentage: 0-100\n    :param smooth bool: enable smooth color transition: True(default)/False\n    :return dict: cct status - states: CW, WW, S\n    ",
            "param(s)": "percent=None smooth=True"
        },
        "help": {
            "doc": "\n    [i] micrOS LM naming convention\n    Load Module built-in help message\n    :return tuple: list of functions implemented by this application\n    ",
            "param(s)": ""
        },
        "img": "https://github.com/BxNxM/micrOS/blob/master/media/lms/cct.png?raw=true",
        "load_n_init": {
            "doc": "\n    Initiate Cold white / Warm white LED module\n    :param cache bool: file state machine cache: True/False/None(default: automatic True)\n    - Load .pds (state machine cache) for this load module\n    - Apply loaded states to gpio pins (boot function)\n    :return str: Cache state\n    ",
            "param(s)": "cache=None"
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins - pin number(s) used by this Load module\n    - info which pins to use for this application\n    :return dict: pin name (str) - pin value (int) pairs\n    \npin map: cwhite, wwhite",
            "param(s)": ""
        },
        "random": {
            "doc": "\n    Demo function: implements random hue change\n    :param smooth bool: enable smooth color transition: True(default)/False\n    :param max_val: set channel maximum generated value: 0-1000\n    :return dict: cct status - states: CW, WW, S\n    ",
            "param(s)": "smooth=True max_val=1000"
        },
        "run_transition": {
            "doc": "\n    Transition execution - white channels change for long dimming periods\n    - runs the generated 2 white dimming generators in timirq\n    :return: Execution verdict\n    ",
            "param(s)": ""
        },
        "set_transition": {
            "doc": "\n    Set transition white channel change for long dimming periods < 30sec\n    - creates the 2 white dimming generators\n    :param cw: cold white value   0-1000\n    :param ww: warm white value 0-1000\n    :param sec: transition length in sec\n    :return: info msg string\n    ",
            "param(s)": "cw ww sec"
        },
        "status": {
            "doc": "\n    [i] micrOS LM naming convention\n    Show Load Module state machine\n    :param lmf str: selected load module function aka (function to show state of): None (show all states)\n    - micrOS client state synchronization\n    :return dict: CW, WW, S\n    ",
            "param(s)": "lmf=None"
        },
        "subscribe_presence": {
            "doc": "\n    Initialize LM presence module with ON/OFF callback functions\n    :return: None\n    ",
            "param(s)": ""
        },
        "toggle": {
            "doc": "\n    Toggle led state based on the stored state\n    :param state bool: True(1)/False(0)/None(default - automatic toggle)\n    :param smooth bool: enable smooth color transition: True(default)/False\n    :return dict: cct status - states: CW, WW, S\n    ",
            "param(s)": "state=None smooth=True"
        },
        "white": {
            "doc": "\n    Set RGB values with PWM signal\n    :param c int: cold white value   0-1000\n    :param w int: warm white value 0-1000\n    :param smooth int: runs white channels change with smooth effect\n    :param force bool: clean fade generators and set color\n    :return dict: cct status - states: CW, WW, S\n    ",
            "param(s)": "c=None w=None smooth=True"
        }
    },
    "co2": {
        "help": {
            "doc": "\n    [i] micrOS LM naming convention\n    Load Module built-in help message\n    :return tuple: list of functions implemented by this application\n    ",
            "param(s)": ""
        },
        "img": "https://github.com/BxNxM/micrOS/blob/master/media/lms/co2.png?raw=true",
        "measure_mq135": {
            "doc": "\n    CO2 Gas Concentration - Parts-per-million - PPM\n    -> 1ppm = 0.0001% gas.\n    Concentration evaluation:\n        250-400ppm      Normal background concentration in outdoor ambient air\n        400-1,000ppm    Concentrations typical of occupied indoor spaces with good air exchange\n        1,000-2,000ppm  Complaints of drowsiness and poor air.\n        2,000-5,000 ppm Headaches, sleepiness and stagnant, stale, stuffy air. Poor concentration, loss of attention, increased heart rate and slight nausea may also be present.\n        5,000ppm        Workplace exposure limit (as 8-hour TWA) in most jurisdictions.\n        >40,000 ppm     Exposure may lead to serious oxygen deprivation resulting in permanent brain damage, coma, even death.\n    :param temperature int: temp compensation - celsius\n    :param humidity int: hum compensation\n    :return str: verdict\n    ",
            "param(s)": "temperature=None humidity=None"
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins - pin number(s) used by this Load module\n    - info which pins to use for this application\n    :return dict: pin name (str) - pin value (int) pairs\n    \npin map: co2",
            "param(s)": ""
        },
        "raw_measure_mq135": {
            "doc": "\n    Measure raw mq135 CO2 value\n    :return str: raw value / adc_property\n    ",
            "param(s)": ""
        }
    },
    "dht11": {
        "help": {
            "doc": "\n    [i] micrOS LM naming convention\n    Load Module built-in help message\n    :return tuple: list of functions implemented by this application\n    ",
            "param(s)": ""
        },
        "img": "https://github.com/BxNxM/micrOS/blob/master/media/lms/dht11.png?raw=true",
        "lmdep": {
            "doc": "\n    Show Load Module dependency\n    - List of load modules used by this application\n    :return: tuple\n    ",
            "param(s)": ""
        },
        "measure": {
            "doc": "\n    Measure with dht11\n    :return dict: temp, hum\n    ",
            "param(s)": ""
        },
        "measure_w_co2": {
            "doc": "\n    Measure with dht11 and mq135 (CO2)\n    :return dict: temp, hum, co2\n    ",
            "param(s)": ""
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins - pin number(s) used by this Load module\n    - info which pins to use for this application\n    :return dict: pin name (str) - pin value (int) pairs\n    \npin map: dhtpin",
            "param(s)": ""
        }
    },
    "dht22": {
        "help": {
            "doc": "\n    [i] micrOS LM naming convention\n    Load Module built-in help message\n    :return tuple: list of functions implemented by this application\n    ",
            "param(s)": ""
        },
        "img": "https://github.com/BxNxM/micrOS/blob/master/media/lms/dht22.png?raw=true",
        "lmdep": {
            "doc": "\n    Show Load Module dependency\n    - List of load modules used by this application\n    :return: tuple\n    ",
            "param(s)": ""
        },
        "measure": {
            "doc": "\n    Measure with dht22\n    :return dict: temp, hum\n    ",
            "param(s)": ""
        },
        "measure_w_co2": {
            "doc": "\n    Measure with dht22 and mq135 (CO2)\n    :return dict: temp, hum, co2\n    ",
            "param(s)": ""
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins - pin number(s) used by this Load module\n    - info which pins to use for this application\n    :return dict: pin name (str) - pin value (int) pairs\n    \npin map: dhtpin",
            "param(s)": ""
        }
    },
    "dimmer": {
        "help": {
            "doc": "\n    [i] micrOS LM naming convention\n    Load Module built-in help message\n    :return tuple: list of functions implemented by this application\n    ",
            "param(s)": ""
        },
        "img": "https://github.com/BxNxM/micrOS/blob/master/media/lms/dimmer.png?raw=true",
        "load_n_init": {
            "doc": "\n    Initiate dimmer module\n    :param cache bool: file state machine cache: True/False/None(default: automatic True)\n    - Load .pds (state machine cache) for this load module\n    - Apply loaded states to gpio pins (boot function)\n    :return str: Cache state\n    ",
            "param(s)": "cache=None"
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins - pin number(s) used by this Load module\n    - info which pins to use for this application\n    :return dict: pin name (str) - pin value (int) pairs\n    \npin map: dim_1",
            "param(s)": ""
        },
        "set_value": {
            "doc": "\n    Set dimmer values with PWM signal\n    :param value int: value 0-1000 default: None (set cached value)\n    :return dict: X, S\n    ",
            "param(s)": "value=None"
        },
        "status": {
            "doc": "\n    [i] micrOS LM naming convention\n    Show Load Module state machine\n    :param lmf str: selected load module function aka (function to show state of): None (show all states)\n    - micrOS client state synchronization\n    :return dict: X, S\n    ",
            "param(s)": "lmf=None"
        },
        "subscribe_presence": {
            "doc": "\n    Initialize LM presence module with ON/OFF callback functions\n    :return: None\n    ",
            "param(s)": ""
        },
        "toggle": {
            "doc": "\n    Toggle dimmer state based on the stored state\n    :param state bool: True(1)/False(0)/None(default - automatic toggle)\n    :return dict: X, S\n    ",
            "param(s)": "state=None"
        }
    },
    "distance": {
        "deinit": {
            "doc": null,
            "param(s)": ""
        },
        "distance_cm": {
            "doc": null,
            "param(s)": ""
        },
        "distance_mm": {
            "doc": "\n    To calculate the distance we get the pulse_time and divide it by 2\n    (the pulse walk the distance twice) and by 29.1 becasue\n    the sound speed on air (343.2 m/s), that It's equivalent to\n    0.34320 mm/us that is 1mm each 2.91us\n    pulse_time // 2 // 2.91 -> pulse_time // 5.82 -> pulse_time * 100 // 582\n    ",
            "param(s)": ""
        },
        "help": {
            "doc": "\n    [i] micrOS LM naming convention\n    Load Module built-in help message\n    :return tuple: list of functions implemented by this application\n    ",
            "param(s)": ""
        },
        "img": "https://github.com/BxNxM/micrOS/blob/master/media/lms/distance.png?raw=true",
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins - pin number(s) used by this Load module\n    - info which pins to use for this application\n    :return dict: pin name (str) - pin value (int) pairs\n    \npin map: hcsrtrig, hcsrecho",
            "param(s)": ""
        }
    },
    "ds18": {
        "help": {
            "doc": "\n    [i] micrOS LM naming convention\n    Load Module built-in help message\n    :return tuple: list of functions implemented by this application\n    ",
            "param(s)": ""
        },
        "img": "https://github.com/BxNxM/micrOS/blob/master/media/lms/ds18.png?raw=true",
        "measure": {
            "doc": "\n    Measure with digital onewire temperature sensor\n    - ds18\n    :return str: temp string\n    ",
            "param(s)": ""
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins - pin number(s) used by this Load module\n    - info which pins to use for this application\n    :return dict: pin name (str) - pin value (int) pairs\n    \npin map: ds18",
            "param(s)": ""
        }
    },
    "esp32": {
        "battery": {
            "doc": "\n    TinyPico battery manager interface\n    :return dict: volt, state (is charging)\n    ",
            "param(s)": ""
        },
        "hall": {
            "doc": "\n    Measure with esp32 built-in hall sensor\n    ",
            "param(s)": ""
        },
        "help": {
            "doc": "\n    [i] micrOS LM naming convention\n    Load Module built-in help message\n    :return tuple: list of functions implemented by this application\n    ",
            "param(s)": ""
        },
        "img": "https://github.com/BxNxM/micrOS/blob/master/media/lms/esp32.png?raw=true",
        "temp": {
            "doc": "\n    Measure CPU temperature\n    ",
            "param(s)": ""
        },
        "touch": {
            "doc": "\n    Test function:\n    :param triglvl: trigger level, value < triglvl decide touched\n    :return dict: verdict isTouched and value\n    ",
            "param(s)": "triglvl=300"
        }
    },
    "genIO": {
        "genio_pins": {
            "doc": "\n    Get used pins in genIO module\n    ",
            "param(s)": ""
        },
        "get_adc": {
            "doc": "\n    Get Analog Digital conersion input\n    :param pin: pin number or logical pin name\n    :param key: select adc parameter by key\n    :return dict: adc volt, percent, raw\n    ",
            "param(s)": "pin key=None"
        },
        "get_in": {
            "doc": "\n    Get digital input (high(1)/ low (0))\n    :param pin: pin number or logical pin\n    :return dict: pin, state\n    ",
            "param(s)": "pin"
        },
        "help": {
            "doc": "\n    [i] micrOS LM naming convention\n    Load Module built-in help message\n    :return tuple: list of functions implemented by this application\n    ",
            "param(s)": ""
        },
        "img": "https://github.com/BxNxM/micrOS/blob/master/media/lms/genIO.png?raw=true",
        "set_out": {
            "doc": "\n    Set simple digital (high/low) output\n    :param pin: pun number or logical name\n    :param state: state: 1/0 = True/False\n    :return dict: pin, state\n    ",
            "param(s)": "pin state=None"
        },
        "set_pwm": {
            "doc": "\n    Set PWM signal output\n    :param pin: pin number or logical name\n    :param duty: pwm duty\n    :param freq: pwm frequency (board dependent)\n    :return dict: pin, freq, duty\n    ",
            "param(s)": "pin duty=500 freq=20480"
        },
        "set_random_pwm": {
            "doc": "\n    Set random PWM duty in min-max range\n    :param pin: pin number or logical name\n    :param min_duty: set min duty value (0-1000)\n    :param max_duty: set max duty value (0-1000)\n    :param freq: pwm frequency (board dependent)\n    ",
            "param(s)": "pin min_duty max_duty freq=20480"
        }
    },
    "i2c": {
        "help": {
            "doc": "\n    [i] micrOS LM naming convention\n    Load Module built-in help message\n    :return tuple: list of functions implemented by this application\n    ",
            "param(s)": ""
        },
        "img": "https://github.com/BxNxM/micrOS/blob/master/media/lms/i2c.png?raw=true",
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins - pin number(s) used by this Load module\n    - info which pins to use for this application\n    :return dict: pin name (str) - pin value (int) pairs\n    \npin map: i2c_scl, i2c_sda",
            "param(s)": ""
        },
        "scan": {
            "doc": "\n    I2C scan function - experimental\n    :return list: list of devices\n    ",
            "param(s)": ""
        }
    },
    "intercon": {
        "dump": {
            "doc": "\n    Dump intercon connection cache\n    :return dict: device-ip pairs\n    ",
            "param(s)": ""
        },
        "help": {
            "doc": "\n    [i] micrOS LM naming convention\n    Load Module built-in help message\n    :return tuple: list of functions implemented by this application\n    ",
            "param(s)": ""
        },
        "img": "https://github.com/BxNxM/micrOS/blob/master/media/lms/intercon.png?raw=true",
        "sendcmd": {
            "doc": "\n    Implements send command function towards micrOS devices\n        example: sendcmd \"hello\" host=\"IP/hostname.local\") OR sendcmd host=\"IP/hostname.local\" cmd=\"system rssi\")\n    :param host[0]: host IP or Hostname\n    :param cmd[1]: command - module func arg(s)\n    :return str: reply\n    ",
            "param(s)": "*args **kwargs"
        }
    },
    "light_sensor": {
        "help": {
            "doc": "\n    [i] micrOS LM naming convention\n    Load Module built-in help message\n    :return tuple: list of functions implemented by this application\n    ",
            "param(s)": ""
        },
        "illuminance": {
            "doc": "\n    Measure light illuminance in flux\n    ",
            "param(s)": ""
        },
        "img": "https://github.com/BxNxM/micrOS/blob/master/media/lms/light_sensor.png?raw=true",
        "intensity": {
            "doc": "\n    Measure light intensity in %\n    max value: 65535\n    ",
            "param(s)": ""
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins - pin number(s) used by this Load module\n    - info which pins to use for this application\n    :return dict: pin name (str) - pin value (int) pairs\n    \npin map: temp6000",
            "param(s)": ""
        }
    },
    "neoeffects": {
        "color": {
            "doc": "\n    Set color buffer - for runtime effect color change\n    :param r int: red channel 0-255 (default: None - cached value)\n    :param g int: green channel 0-255 (default: None - cached value)\n    :param b int: blue channel 0-255 (default: None - cached value)\n    :return dict: rgb status - states: R, G, B, S\n    ",
            "param(s)": "r=None g=None b=None"
        },
        "cycle": {
            "doc": "\n    Cycle effect\n    :param r int: red value 0-1000\n    :param g int: green value 0-1000\n    :param b int: blue value 0-1000\n    :param shift bool: automatic effect shifting\n    :param ledcnt int: number of neopixel elements in chain (default: 24)\n    :return str: verdict\n    ",
            "param(s)": "r=None g=None b=None shift=True ledcnt=24"
        },
        "fire": {
            "doc": null,
            "param(s)": "r=None g=None b=None ledcnt=24"
        },
        "help": {
            "doc": "\n    [i] micrOS LM naming convention\n    Load Module built-in help message\n    :return tuple: list of functions implemented by this application\n    ",
            "param(s)": ""
        },
        "img": "https://github.com/BxNxM/micrOS/blob/master/media/lms/neoeffects.png?raw=true",
        "lmdep": {
            "doc": "\n    Show Load Module dependency\n    - List of load modules used by this application\n    :return: tuple\n    ",
            "param(s)": ""
        },
        "meteor": {
            "doc": "\n    Meteor effect\n    :param r int: red value 0-1000\n    :param g int: green value 0-1000\n    :param b int: blue value 0-1000\n    :param shift bool: automatic effect shifting\n    :param ledcnt int: number of neopixel elements in chain (default: 24)\n    :return str: verdict\n    ",
            "param(s)": "r=None g=None b=None shift=True ledcnt=24"
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins - pin number(s) used by this Load module\n    - info which pins to use for this application\n    :return dict: pin name (str) - pin value (int) pairs\n    \npin map: neop",
            "param(s)": ""
        },
        "rainbow": {
            "doc": "\n    Rainbow effect\n    :param step int: color weel resolution in step (default: 1)\n    :param br int: brightness in percentage\n    :param ledcnt int: number of neopixel elements in chain (default: 24)\n    :return str: verdict\n    ",
            "param(s)": "step=1 br=50 ledcnt=24"
        },
        "random": {
            "doc": "\n    Demo function: implements random color change\n    :param max_val: set channel maximum generated value: 0-255\n    :return str: rgb status - states: R, G, B\n    ",
            "param(s)": "max_val=255"
        },
        "shader": {
            "doc": "\n    Shader for ring lamp\n    :param size int: shader size (disabled LEDs)\n    :param offset int: rotate shader 0-(ledcnt-1)\n    :param shift bool: auto shift shader effect (False)\n    :param ledcnt int: number of neopixel elements in chain (default: 24)\n    :return str: verdict\n    ",
            "param(s)": "size=6 offset=0 shift=False ledcnt=24"
        }
    },
    "neopixel": {
        "brightness": {
            "doc": "\n    Set neopixel brightness\n    :param percent int: brightness percentage: 0-100\n    :param smooth bool: enable smooth color transition: True(default)/False\n    :return dict: rgb status - states: R, G, B, S\n    ",
            "param(s)": "percent=None smooth=True"
        },
        "help": {
            "doc": "\n    [i] micrOS LM naming convention\n    Load Module built-in help message\n    :return tuple: list of functions implemented by this application\n    ",
            "param(s)": ""
        },
        "img": "https://github.com/BxNxM/micrOS/blob/master/media/lms/neopixel.png?raw=true",
        "load_n_init": {
            "doc": "\n    Initiate NeoPixel RGB module\n    :param cache bool: file state machine cache: True/False/None(default: automatic True)\n    - Load .pds (state machine cache) for this load module\n    - Apply loaded states to gpio pins (boot function)\n    :return str: Cache state\n    ",
            "param(s)": "cache=None ledcnt=24"
        },
        "neopixel": {
            "doc": "\n    Set NEOPIXEL RGB values\n    :param r: red value   0-254\n    :param g: green value 0-254\n    :param b: blue value  0-254\n    :param smooth: runs colors change with smooth effect\n    :param force: clean fade generators and set color\n    :return dict: rgb status - states: R, G, B, S\n    ",
            "param(s)": "r=None g=None b=None smooth=True"
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins - pin number(s) used by this Load module\n    - info which pins to use for this application\n    :return dict: pin name (str) - pin value (int) pairs\n    \npin map: neop",
            "param(s)": ""
        },
        "random": {
            "doc": "\n    Demo function: implements random color change\n    :param smooth bool: enable smooth color transition: True(default)/False\n    :param max_val: set channel maximum generated value: 0-1000\n    :return dict: rgb status - states: R, G, B, S\n    ",
            "param(s)": "smooth=True max_val=254"
        },
        "run_transition": {
            "doc": "\n    Transition execution - color change for long dimming periods\n    - runs the generated color dimming generators\n    :return str: Execution verdict: Run / No Run\n    ",
            "param(s)": ""
        },
        "segment": {
            "doc": "\n    Set single segment by index on neopixel\n    :param r: red value 0-254\n    :param g: green value 0-254\n    :param b: blue value 0-254\n    :param s: segment - index 0-ledcnt\n    :param cache: cache color (update .pds file)\n    :param write: send color buffer to neopixel (update LEDs)\n    :return dict: rgb status - states: R, G, B, S\n    ",
            "param(s)": "r=None g=None b=None s=0 cache=False write=True"
        },
        "set_transition": {
            "doc": "\n    Set transition color change for long dimming periods < 30sec\n    - creates the color dimming generators\n    :param r: red value   0-255\n    :param g: green value 0-255\n    :param b: blue value  0-255\n    :param sec: transition length in sec\n    :return: info msg string\n    ",
            "param(s)": "r g b sec"
        },
        "status": {
            "doc": "\n    [i] micrOS LM naming convention\n    Show Load Module state machine\n    :param lmf str: selected load module function aka (function to show state of): None (show all states)\n    - micrOS client state synchronization\n    :return dict: R, G, B, S\n    ",
            "param(s)": "lmf=None"
        },
        "subscribe_presence": {
            "doc": "\n    Initialize LM presence module with ON/OFF callback functions\n    :return: None\n    ",
            "param(s)": ""
        },
        "toggle": {
            "doc": "\n    Toggle led state based on the stored state\n    :param state: True(1)/False(0)\n    :param smooth: runs colors change with smooth effect\n    :return dict: rgb status - states: R, G, B, S\n    ",
            "param(s)": "state=None smooth=True"
        }
    },
    "oled": {
        "clean": {
            "doc": "\n    Clean display\n    :param state: 0/1\n    ",
            "param(s)": "state=0"
        },
        "help": {
            "doc": "\n    [i] micrOS LM naming convention\n    Load Module built-in help message\n    :return tuple: list of functions implemented by this application\n    ",
            "param(s)": ""
        },
        "img": "https://github.com/BxNxM/micrOS/blob/master/media/lms/oled.png?raw=true",
        "invert": {
            "doc": "\n    Invert OLED display\n    ",
            "param(s)": ""
        },
        "line": {
            "doc": "\n    Draw line on OLED\n    :param sx: start x\n    :param sy: start y\n    :param ex: end x\n    :param ey: end y\n    :param state: state 0/1\n    ",
            "param(s)": "sx sy ex ey state=1"
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins - pin number(s) used by this Load module\n    - info which pins to use for this application\n    :return dict: pin name (str) - pin value (int) pairs\n    \npin map: i2c_scl, i2c_sda",
            "param(s)": ""
        },
        "poweroff": {
            "doc": "\n    Power OFF OLED\n    ",
            "param(s)": ""
        },
        "poweron": {
            "doc": "\n    Power ON OLED\n    ",
            "param(s)": ""
        },
        "rect": {
            "doc": "\n    Draw rectangle on OLED\n    :param x: start x\n    :param y: start y\n    :param w: width\n    :param h: height\n    :param state: state\n    :param fill: fill rectangle (True/False)\n    ",
            "param(s)": "x y w h state=1 fill=False"
        },
        "show": {
            "doc": "\n    Show OLED buffer data\n    - update display\n    ",
            "param(s)": ""
        },
        "text": {
            "doc": "\n    Create text on OLED\n    :param string: text to draw\n    :param x: 0-127\n    :param y: 0-63\n    ",
            "param(s)": "string=\"text\" x=0 y=0"
        }
    },
    "oled_ui": {
        "button": {
            "doc": "module 'LM_oled_ui' has no attribute 'button'",
            "param(s)": ""
        },
        "control": {
            "doc": "\n    OLED UI control\n    :param cmd str: next, prev, press, on, off\n    :return str: verdict\n    ",
            "param(s)": "cmd='next'"
        },
        "help": {
            "doc": "\n    [i] micrOS LM naming convention\n    Load Module built-in help message\n    :return tuple: list of functions implemented by this application\n    ",
            "param(s)": ""
        },
        "img": "https://github.com/BxNxM/micrOS/blob/master/media/lms/oled_ui.png?raw=true",
        "intercon_genpage": {
            "doc": "\n    Create intercon pages dynamically :)\n    - based on cmd value.\n    :param cmd: 'host hello' or 'host system clock'\n    :return: page creation verdict\n    ",
            "param(s)": "cmd=None"
        },
        "lmdep": {
            "doc": "\n    Show Load Module dependency\n    - List of load modules used by this application\n    :return: tuple\n    ",
            "param(s)": ""
        },
        "msgbox": {
            "doc": "\n    POP-UP message function\n    :param msg: message string\n    ",
            "param(s)": "msg='micrOS msg'"
        },
        "pageui": {
            "doc": "\n    Init&RUN PageUI\n    - add page definitions here - interface from code\n    :param pwr_sec: power down oled after given sec - power safe\n    ",
            "param(s)": "pwr_sec=None"
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins - pin number(s) used by this Load module\n    - info which pins to use for this application\n    :return dict: pin name (str) - pin value (int) pairs\n    \npin map: i2c_scl, i2c_sda, oleduibttn",
            "param(s)": ""
        }
    },
    "pet_feeder": {
        "help": {
            "doc": "\n    [i] micrOS LM naming convention\n    Load Module built-in help message\n    :return tuple: list of functions implemented by this application\n    ",
            "param(s)": ""
        },
        "img": "https://github.com/BxNxM/micrOS/blob/master/media/lms/pet_feeder.png?raw=true",
        "lmdep": {
            "doc": "\n    Show Load Module dependency\n    - List of load modules used by this application\n    :return: tuple\n    ",
            "param(s)": ""
        },
        "portion": {
            "doc": null,
            "param(s)": "repeat=1 posmin=65 posmax=97"
        },
        "portion_new": {
            "doc": null,
            "param(s)": "count=1 forward=135 back=10"
        }
    },
    "ph_sensor": {
        "help": {
            "doc": "\n    [i] micrOS LM naming convention\n    Load Module built-in help message\n    :return tuple: list of functions implemented by this application\n    ",
            "param(s)": ""
        },
        "img": "https://github.com/BxNxM/micrOS/blob/master/media/lms/ph_sensor.png?raw=true",
        "measure": {
            "doc": null,
            "param(s)": ""
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins - pin number(s) used by this Load module\n    - info which pins to use for this application\n    :return dict: pin name (str) - pin value (int) pairs\n    \npin map: ph",
            "param(s)": ""
        }
    },
    "presence": {
        "get_samples": {
            "doc": "\n    [DEBUG] Return measured data set\n    ",
            "param(s)": ""
        },
        "help": {
            "doc": "\n    [i] micrOS LM naming convention\n    Load Module built-in help message\n    :return tuple: list of functions implemented by this application\n    ",
            "param(s)": ""
        },
        "img": "https://github.com/BxNxM/micrOS/blob/master/media/lms/presence.png?raw=true",
        "load_n_init": {
            "doc": "\n    Initialize presence module\n    :param threshold: trigger on relative noice change in percent\n    :param timer: off timer in sec\n    :param mic: enable / disable mic sampling (bool)\n    ",
            "param(s)": "threshold=Data.TRIG_THRESHOLD timer=Data.TIMER_VALUE mic=Data.ENABLE_MIC"
        },
        "motion_trig": {
            "doc": "\n    Set motion trigger by IRQx - PIR sensor\n    - Reset OFF_EV_TIMER to TIMER_VALUE\n    - Start async mic sample task\n    ",
            "param(s)": "sample_ms=20 buff_size=15"
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins - pin number(s) used by this Load module\n    - info which pins to use for this application\n    :return dict: pin name (str) - pin value (int) pairs\n    \npin map: mic, irq1",
            "param(s)": ""
        },
        "subscribe_intercon": {
            "doc": "\n    Subscribe function for remote function execution\n    - intercon ON/OFF string callbacks\n        ON: host cmd\n        OFF: host cmd\n    ",
            "param(s)": "on off"
        }
    },
    "rgb": {
        "brightness": {
            "doc": "\n    Set RGB brightness\n    :param percent int: brightness percentage: 0-100\n    :param smooth bool: enable smooth color transition: True(default)/False\n    :return dict: rgb status - states: R, G, B, S\n    ",
            "param(s)": "percent=None smooth=True"
        },
        "help": {
            "doc": "\n    [i] micrOS LM naming convention\n    Load Module built-in help message\n    :return tuple: list of functions implemented by this application\n    ",
            "param(s)": ""
        },
        "img": "https://github.com/BxNxM/micrOS/blob/master/media/lms/rgb.png?raw=true",
        "load_n_init": {
            "doc": "\n    Initiate RGB module\n    :param cache bool: file state machine cache: True/False/None(default: automatic True)\n    - Load .pds (state machine cache) for this load module\n    - Apply loaded states to gpio pins (boot function)\n    :return str: Cache state\n    ",
            "param(s)": "cache=None"
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins - pin number(s) used by this Load module\n    - info which pins to use for this application\n    :return dict: pin name (str) - pin value (int) pairs\n    \npin map: redgb, rgreenb, rgbue",
            "param(s)": ""
        },
        "random": {
            "doc": "\n    Demo function: implements random color change\n    :param smooth bool: enable smooth color transition: True(default)/False\n    :param max_val: set channel maximum generated value: 0-1000\n    :return dict: rgb status - states: R, G, B, S\n    ",
            "param(s)": "smooth=True max_val=1000"
        },
        "rgb": {
            "doc": "\n    Set RGB values with PWM signal\n    :param r int: red value   0-1000\n    :param g int: green value 0-1000\n    :param b int: blue value  0-1000\n    :param smooth bool: enable smooth color transition: True(default)/False\n    :param force bool: clean fade generators and set color (default: True)\n    :return dict: rgb status - states: R, G, B, S\n    ",
            "param(s)": "r=None g=None b=None smooth=True"
        },
        "run_transition": {
            "doc": "\n    Transition execution - color change for long dimming periods\n    - runs the generated color dimming generators\n    :return str: Execution verdict: Run / No Run\n    ",
            "param(s)": ""
        },
        "set_transition": {
            "doc": "\n    Set transition color change for long dimming periods < 30sec\n    - creates the color dimming generators\n    :param r int: red value   0-1000\n    :param g int: green value 0-1000\n    :param b int: blue value  0-1000\n    :param sec int: transition length in sec\n    :return str: info msg string\n    ",
            "param(s)": "r g b sec"
        },
        "status": {
            "doc": "\n    [i] micrOS LM naming convention\n    Show Load Module state machine\n    :param lmf str: selected load module function aka (function to show state of): None (show all states)\n    - micrOS client state synchronization\n    :return dict: R, G, B, S\n    ",
            "param(s)": "lmf=None"
        },
        "subscribe_presence": {
            "doc": "\n    Initialize LM presence module with ON/OFF callback functions\n    :return: None\n    ",
            "param(s)": ""
        },
        "toggle": {
            "doc": "\n    Toggle led state based on the stored state\n    :param state bool: True(1)/False(0)/None(default - automatic toggle)\n    :param smooth bool: enable smooth color transition: True(default)/False\n    :return dict: rgb status - states: R, G, B, S\n    ",
            "param(s)": "state=None smooth=True"
        }
    },
    "roboarm": {
        "boot_move": {
            "doc": "\n    Full range demo move\n    :param speed_ms: speed - step wait in ms\n    :return: verdict\n    ",
            "param(s)": "speed_ms=None"
        },
        "control": {
            "doc": "\n    Control robot arm function\n    :param x_new: new x position\n    :param y_new: new y position\n    :param speed_ms: speed - step wait in ms\n    :param smooth: smooth transition, default True\n    :return str: move verdict\n    ",
            "param(s)": "x_new y_new speed_ms=None smooth=True"
        },
        "help": {
            "doc": "\n    [i] micrOS LM naming convention\n    Load Module built-in help message\n    :return tuple: list of functions implemented by this application\n    ",
            "param(s)": ""
        },
        "img": "https://github.com/BxNxM/micrOS/blob/master/media/lms/roboarm.png?raw=true",
        "jiggle": {
            "doc": "\n    Joggle roboarm in small range\n    ",
            "param(s)": ""
        },
        "lmdep": {
            "doc": "\n    Show Load Module dependency\n    - List of load modules used by this application\n    :return: tuple\n    ",
            "param(s)": ""
        },
        "load_n_init": {
            "doc": "\n    Initiate roboarm module\n    :param cache bool: file state machine cache: True/False/None(default: automatic True)\n    - Load .pds (state machine cache) for this load module\n    - Apply loaded states to gpio pins (boot function)\n    :return str: Cache state\n    ",
            "param(s)": ""
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins - pin number(s) used by this Load module\n    - info which pins to use for this application\n    :return dict: pin name (str) - pin value (int) pairs\n    \npin map: servo_1, servo_2, switch_1",
            "param(s)": ""
        },
        "play": {
            "doc": "\n    Runs move instructions from input or RoboArm.MOVE_RECORD\n    :param args: X Y X2 Y2 ...\n    :param s: SPEED_MS (delay)\n    :param delay: delay in ms between steps\n    :param deinit: deinit servo after execution\n    :return: verdict\n    ",
            "param(s)": "*args s=None delay=None deinit=True"
        },
        "random": {
            "doc": "\n    Move to random position\n    :param x_range: +/- x(35) from center\n    :param y_range: +/- y(35) from center\n    :return str: move verdict\n    ",
            "param(s)": "x_range=20 y_range=20 speed_ms=5"
        },
        "record": {
            "doc": "\n    Record function for move automation :D\n    - Store actual X, Y\n    :param clean: clean move cache (True), default: False\n    :return: verdict\n    ",
            "param(s)": "clean=False"
        },
        "standby": {
            "doc": "\n    Standby roboarm - OFF switch\n    ",
            "param(s)": ""
        },
        "status": {
            "doc": "\n    [i] micrOS LM naming convention\n    Show Load Module state machine\n    :param lmf str: selected load module function aka (function to show state of): None (show all states)\n    - micrOS client state synchronization\n    :return dict: X, Y\n    ",
            "param(s)": "lmf=None"
        }
    },
    "robustness": {
        "help": {
            "doc": "\n    [i] micrOS LM naming convention\n    Load Module built-in help message\n    :return tuple: list of functions implemented by this application\n    ",
            "param(s)": ""
        },
        "img": "https://github.com/BxNxM/micrOS/blob/master/media/lms/robustness.png?raw=true",
        "memory_leak": {
            "doc": null,
            "param(s)": "cnt=160"
        },
        "raise_error": {
            "doc": null,
            "param(s)": ""
        },
        "recursion_limit": {
            "doc": null,
            "param(s)": "cnt=14"
        }
    },
    "servo": {
        "deinit": {
            "doc": "\n    Deinit servo motors\n    - stop pwm channels (sduty/s2duty)\n    ",
            "param(s)": ""
        },
        "help": {
            "doc": "\n    [i] micrOS LM naming convention\n    Load Module built-in help message\n    :return tuple: list of functions implemented by this application\n    ",
            "param(s)": ""
        },
        "img": "https://github.com/BxNxM/micrOS/blob/master/media/lms/servo.png?raw=true",
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins - pin number(s) used by this Load module\n    - info which pins to use for this application\n    :return dict: pin name (str) - pin value (int) pairs\n    \npin map: servo_1, servo_2",
            "param(s)": ""
        },
        "s2duty": {
            "doc": "\n    Set servo (2) position\n    :param duty: servo duty position 40-115, default: 75\n    :return: verdict\n    ",
            "param(s)": "duty=75"
        },
        "sdemo": {
            "doc": "\n    Demo move function for sduty (1)\n    ",
            "param(s)": ""
        },
        "sduty": {
            "doc": "\n    Set servo (1) position\n    :param duty: servo duty position 40-115, default: 75\n    :return: verdict\n    ",
            "param(s)": "duty=75"
        },
        "status": {
            "doc": "\n    [i] micrOS LM naming convention\n    Show Load Module state machine\n    :param lmf str: selected load module function aka (function to show state of): None (show all states)\n    - lmf: sduty, s2duty\n    - micrOS client state synchronization\n    :return dict: S1(X), S2(X)\n    ",
            "param(s)": "lmf=None"
        }
    },
    "stepper": {
        "angle": {
            "doc": "\n    Control stepper motor by angle\n    :param dg: +/- 0-360 degree\n    :param speed: wait ms\n    :return: verdict\n    ",
            "param(s)": "dg speed=None"
        },
        "help": {
            "doc": "\n    [i] micrOS LM naming convention\n    Load Module built-in help message\n    :return tuple: list of functions implemented by this application\n    ",
            "param(s)": ""
        },
        "img": "https://github.com/BxNxM/micrOS/blob/master/media/lms/stepper.png?raw=true",
        "load_n_init": {
            "doc": "\n    Init stepper motor module\n    :param mode: step mode: HALF/FULL\n    ",
            "param(s)": "mode=\"HALF\""
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins - pin number(s) used by this Load module\n    - info which pins to use for this application\n    :return dict: pin name (str) - pin value (int) pairs\n    \npin map: stppr_1, stppr_2, stppr_3, stppr_4",
            "param(s)": ""
        },
        "standby": {
            "doc": "\n    Deinit stepper motor\n    - power down\n    ",
            "param(s)": ""
        },
        "step": {
            "doc": "\n    Control stepper motor by step\n    :param st: step\n    :param speed: set step speed, wait ms\n    ",
            "param(s)": "st speed=None"
        }
    },
    "switch": {
        "help": {
            "doc": "\n    [i] micrOS LM naming convention\n    Load Module built-in help message\n    :return tuple: list of functions implemented by this application\n    ",
            "param(s)": ""
        },
        "img": "https://github.com/BxNxM/micrOS/blob/master/media/lms/switch.png?raw=true",
        "load_n_init": {
            "doc": "\n    Initiate switch module (4 switch pack)\n    :param cache bool: file state machine cache: True/False/None(default: automatic True)\n    - Load .pds (state machine cache) for this load module\n    - Apply loaded states to gpio pins (boot function)\n    :return str: Cache state\n    ",
            "param(s)": "cache=None ch_init=None"
        },
        "pinmap": {
            "doc": "\n    [i] micrOS LM naming convention\n    Shows logical pins - pin number(s) used by this Load module\n    - info which pins to use for this application\n    :return dict: pin name (str) - pin value (int) pairs\n    \npin map: switch_1, switch_2, switch_3, switch_4",
            "param(s)": ""
        },
        "set_state": {
            "doc": "\n    Set switch (1) state\n    :param state bool: True/False/None(default: use cached value)\n    :return: verdict\n    ",
            "param(s)": "state=None"
        },
        "set_state2": {
            "doc": "\n    Set switch (2) state\n    :param state bool: True/False/None(default: use cached value)\n    :return: verdict\n    ",
            "param(s)": "state=None"
        },
        "set_state3": {
            "doc": "\n    Set switch (3) state\n    :param state bool: True/False/None(default: use cached value)\n    :return: verdict\n    ",
            "param(s)": "state=None"
        },
        "set_state4": {
            "doc": "\n    Set switch (4) state\n    :param state bool: True/False/None(default: use cached value)\n    :return: verdict\n    ",
            "param(s)": "state=None"
        },
        "status": {
            "doc": "\n    [i] micrOS LM naming convention\n    Show Load Module state machine\n    :param lmf str: selected load module function aka (function to show state of): None (show all states)\n    - lmf: set_stateX, toggleX - X: 1,2,3,4\n    - micrOS client state synchronization\n    :return dict: SW1, SW2, SW3, SW4 -> S\n    ",
            "param(s)": "lmf=None"
        },
        "toggle": {
            "doc": "\n    Toggle switch (1) state based on current state\n    :return: set_state verdict\n    ",
            "param(s)": ""
        },
        "toggle2": {
            "doc": "\n    Toggle switch (2) state based on current state\n    :return: set_state verdict\n    ",
            "param(s)": ""
        },
        "toggle3": {
            "doc": "\n    Toggle switch (3) state based on current state\n    :return: set_state verdict\n    ",
            "param(s)": ""
        },
        "toggle4": {
            "doc": "\n    Toggle switch (4) state based on current state\n    :return: set_state verdict\n    ",
            "param(s)": ""
        }
    },
    "system": {
        "alarms": {
            "doc": null,
            "param(s)": "clean=False test=False"
        },
        "cachedump": {
            "doc": null,
            "param(s)": "cdel=None"
        },
        "clock": {
            "doc": "\n    Get formatted localtime value\n    Format:\n        YYYY.MM.DD  hh:mm:ss\n        WD: 0-6 YD: 0-364\n    ",
            "param(s)": ""
        },
        "gclean": {
            "doc": "\n    Run micropython garbage collection\n    ",
            "param(s)": ""
        },
        "ha_sta": {
            "doc": "\n    Check and repair STA network mode\n    - able to restart the system -> wifi reconnect\n    ",
            "param(s)": ""
        },
        "heartbeat": {
            "doc": "\n    Test function for built-in led blinking and test reply message\n    ",
            "param(s)": ""
        },
        "help": {
            "doc": "\n    [i] micrOS LM naming convention\n    Load Module built-in help message\n    :return tuple: list of functions implemented by this application\n    ",
            "param(s)": ""
        },
        "ifconfig": {
            "doc": "\n    Show network ifconfig\n    ",
            "param(s)": ""
        },
        "img": "https://github.com/BxNxM/micrOS/blob/master/media/lms/system.png?raw=true",
        "info": {
            "doc": null,
            "param(s)": ""
        },
        "lmpacman": {
            "doc": null,
            "param(s)": "lm_del=None"
        },
        "module": {
            "doc": "\n    List / unload Load Modules\n    :param unload str: module name to unload\n    :param unload None: list active modules\n    :return str: verdict\n    ",
            "param(s)": "unload=None"
        },
        "ntp": {
            "doc": "\n    Trigger NTP time sync\n    ",
            "param(s)": ""
        },
        "pinmap": {
            "doc": "\n    Get Logical pin by key runtime\n    :param key str: logical pin name to resolve\n    :return dict: key map\n    \npin map: map, booked, builtin",
            "param(s)": "key='builtin'"
        },
        "rssi": {
            "doc": "\n    Show Wifi RSSI - wifi strength\n    ",
            "param(s)": ""
        },
        "setclock": {
            "doc": "\n    Set Localtime + RTC Clock manually\n    :param year\n    :param month\n    :param mday\n    :param hour\n    :param min\n    :param sec\n    :return: localtime\n    ",
            "param(s)": "year month mday hour min sec"
        },
        "sun": {
            "doc": "\n    Get sunset/sunrise time stumps\n    Parameters:\n        (bool) refresh: trigger sync with sun rest-api\n    Return:\n        (dict) sun time\n    ",
            "param(s)": "refresh=False"
        }
    },
    "task": {
        "img": "https://github.com/BxNxM/micrOS/blob/master/media/lms/tasks.png?raw=true",
        "kill": {
            "doc": "kill / stop micrOS task",
            "param(s)": "taskID"
        },
        "list": {
            "doc": "list micrOS tasks by taskID",
            "param(s)": ""
        }
    },
    "tinyrgb": {
        "getstate": {
            "doc": "\n    Get state of TinyPico built-in LED\n    ",
            "param(s)": ""
        },
        "help": {
            "doc": "\n    [i] micrOS LM naming convention\n    Load Module built-in help message\n    :return tuple: list of functions implemented by this application\n    ",
            "param(s)": ""
        },
        "img": "https://github.com/BxNxM/micrOS/blob/master/media/lms/tinyrgb.png?raw=true",
        "setrgb": {
            "doc": "\n    TinyPico built-in apa102 LED control\n    :param r: red value 0-254\n    :param g: green value 0-254\n    :param b: blue value 0-254\n    :param br: brightness of LED 0-100\n    ",
            "param(s)": "r=None g=None b=None br=None"
        },
        "toggle": {
            "doc": "\n    Toggle TinyPico built-in LED\n    :param state bool: True/False/None(default: based on current toggle)\n    :return str: verdict\n    ",
            "param(s)": "state=None"
        },
        "wheel": {
            "doc": "\n    TinyPico ColorWheel generator - step color on LED\n    :param br: brightness 0-100\n    :return str: verdict\n    ",
            "param(s)": "br=None"
        }
    }
}